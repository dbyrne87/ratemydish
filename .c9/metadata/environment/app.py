{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"#import modules and external file#\nimport os\nimport bcrypt\nfrom flask import Flask, render_template, redirect, request, url_for, session, flash\nfrom flask_pymongo import PyMongo, pymongo\nfrom bson.objectid import ObjectId \nfrom flask_mail import Mail, Message\nfrom app_variables import *\nfrom collections import OrderedDict\n\n# Configure Flask and Mail Server #\napp = Flask(__name__, static_url_path='/static')\napp.config[\"MONGO_DBNAME\"] = MONGO_DBNAME\napp.config[\"MONGO_URI\"] = MONGO_URI\n\n\napp.config['MAIL_SERVER'] = MAIL_SERVER\napp.config['MAIL_PORT'] = MAIL_PORT\napp.config['MAIL_USE_TLS'] = MAIL_USE_TLS\napp.config['MAIL_USE_SSL'] = MAIL_USE_SSL\napp.config['MAIL_USERNAME'] = MAIL_USERNAME\napp.config['MAIL_PASSWORD'] = MAIL_PASSWORD\napp.config['MAIL_DEFAULT_SENDER'] = MAIL_DEFAULT_SENDER\napp.config['MAIL_MAX_EMAILS'] = MAIL_MAX_EMAILS\napp.config['MAIL_SUPRESS_SEND'] = MAIL_SUPRESS_SEND\napp.config['MAIL_ASCII_ATTACHMENTS'] = MAIL_ASCII_ATTACHMENTS\n\nmail = Mail(app)\nmongo = PyMongo(app)\n\n# Global Variables used multiple Times#\n# Get Unique and Specific Data from each Key as used in home.html) #\nmeal_types_category = mongo.db.meal_types.distinct('meal_type')\ncuisine_type_categories = mongo.db.cuisine_types.distinct('cuisine_types')\nspecial_diet_type_category = mongo.db.special_diets.distinct('special_diet')\ndifficulty_type_category = mongo.db.meal_type.distinct('difficulty')\n\n\n# Homepage will render home.html if user logged in or register.html if not #\n@app.route('/')\ndef meal_types():\n    # If the user is logged in #\n    if 'username' in session:\n        return render_template(\"home.html\", \n        most_liked= mongo.db.meal_type.find(),\n        favourites= mongo.db.meal_type.find(),\n        meal_type_category= meal_types_category,\n        cuisine_type_category= cuisine_type_categories,\n        special_diet_type_category= special_diet_type_category,\n        difficulty_type_category= difficulty_type_category,\n        username= mongo.db.users.find_one({\"username\": session['username']}))\n        \n    # Else send them to the register.html page# \n    return render_template('register_login.html')\n\n\n# Register Page, Has Sign Up (/register), Log In(/login) or Continue as Guest Options(/guest_login)#\n@app.route('/register', methods=['POST', 'GET'])\ndef register():\n    # Step 1: Check to see if username exists already #\n    if request.method == 'POST':\n        users = mongo.db.users\n        existing_user = users.find_one({'name' : request.form['username']})\n\n    # Step 2: If Username doesn't exist add their details to the database and hash their password #\n    if existing_user is None:\n       hashpass = bcrypt.hashpw(request.form['pass'].encode('utf-8'), bcrypt.gensalt())\n       users.insert({'name' : request.form['username'], 'password' : hashpass, 'email' : request.form['email']})\n       session['username'] = request.form['username']\n       return render_template(\"home.html\", \n       most_liked=mongo.db.meal_type.find(),\n       favourites=mongo.db.meal_type.find(),\n       meal_type_category= meal_types_category,\n       cuisine_type_category=cuisine_type_categories,\n       special_diet_type_category=special_diet_type_category,\n       difficulty_type_category=difficulty_type_category,\n       username=mongo.db.users.find_one({\"username\": session['username']}))\n    \n    # Step 3: Else Return the user to register page with error #    \n    return render_template('register_login.html',\n    flash=flash('That Username is already taken please try again!'))    \n\n# Register Page, Login section#\n@app.route('/login', methods=['POST'])\ndef login():\n    # Get the details the user has entered #\n    users = mongo.db.users\n    login_user = users.find_one({'name' : request.form['username']})\n    # If the username is in the database check the password and go to the homepage#\n    if login_user:\n        if bcrypt.hashpw(request.form['pass'].encode('utf-8'), login_user['password']) == login_user['password']: \n            session['username'] = request.form['username']\n            return render_template(\"home.html\", \n            most_liked=mongo.db.meal_type.find(),\n            favourites=mongo.db.meal_type.find(),\n            meal_type_category= meal_types_category,\n            cuisine_type_category=cuisine_type_categories,\n            special_diet_type_category=special_diet_type_category,\n            difficulty_type_category=difficulty_type_category,\n            username=mongo.db.users.find_one({\"username\": session['username']}))\n        # Else return to register screen with error if password incorrect#\n        return render_template('register_login.html',\n        flash=flash('Wrong Username and Password Combination. Please Try Again!'))\n    # Else return to register screen with error if username incorrect#\n    return render_template('register_login.html',\n    flash=flash('Wrong Username and Password Combination. Please Try Again!'))   \n\n@app.route('/guest_login')\ndef guest_login():\n    # If User is already logged in #\n    if 'username' in session:\n        return render_template(\"home.html\", \n        most_liked=mongo.db.meal_type.find(),\n        favourites=mongo.db.meal_type.find(),\n        meal_type_category=meal_types_category,\n        cuisine_type_category=cuisine_type_categories,\n        special_diet_type_category= special_diet_type_category,\n        difficulty_type_category=difficulty_type_category,\n        username=mongo.db.users.find_one({\"username\": session['username']}))\n    \n    # Else Render the same template as the above without a session cookie#\n    return render_template(\"home.html\", \n        most_liked=mongo.db.meal_type.find(),\n        favourites=mongo.db.meal_type.find(),\n        meal_type_category=meal_types_category,\n        cuisine_type_category=cuisine_type_categories,\n        special_diet_type_category= special_diet_type_category,\n        difficulty_type_category=difficulty_type_category)    \n\n\n# When a 'Get Recipe' button is clicked, it queries the database for the specific recipe details and returns it to the user in recipe_page.html #\n@app.route('/view_recipe/<search>', methods=['POST', 'GET'])\ndef view_recipe(search):\n    title_results =  mongo.db.meal_type.find_one( {'_id': ObjectId(request.form['get_recipe']) })\n    if 'username' in session:\n        return render_template('recipe_page.html', task=title_results,\n        username=mongo.db.users.find_one({\"username\": session['username']}))\n    return render_template('recipe_page.html', task=title_results)   \n\n# If User is Logged In then allow them to add a Recipe #    \n@app.route('/add_recipe')\ndef add_recipe():\n    if 'username' in session:\n        return render_template(\"add_recipe.html\",\n        meal_types= mongo.db.meal_types.find(), # Gets the values from the meal_types collection #\n        cuisine_types= mongo.db.cuisine_types.find(), # Gets the values from the cuisine_types collection #\n        special_diet= mongo.db.special_diets.find(), # Gets the values from the special_diets collection #                       \n        username=mongo.db.users.find_one({\"username\": session['username']}))\n# Else send them to the register page with message #        \n    return render_template('register_login.html',\n           flash=flash('You must Sign In to Add a Recipe!'))\n    \n# Function for inserting the recipe to the database #    \n@app.route('/insert_recipe', methods=['POST'])\ndef insert_recipe():\n    meals=mongo.db.meal_type\n    meals.insert_one(request.form.to_dict()) # inserts all the data to the database #\n    # if the image_url wasn't entered give it a default value #\n    mongo.db.meal_type.find_and_modify( {'image_url': ''}, update={\"$set\": {'image_url': 'https://images.pexels.com/photos/277253/pexels-photo-277253.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'}})\n    # Modify the initial like & dislike values to a Integer and the comments value to an array #\n    mongo.db.meal_type.find_and_modify( {'likes': '0'}, update={\"$set\": {'likes': 0 }})\n    mongo.db.meal_type.find_and_modify( {'dislikes': '0'}, update={\"$set\": {'dislikes': 0 }})\n    mongo.db.meal_type.find_and_modify( {'comments': \"\"}, update={\"$set\": {'comments': ['No Comments Yet'] }})\n    return render_template('add_recipe.html', # Returns the user to the add_recipe page with success message #\n            flash=flash('Your Recipe Has Been Added!'),\n            meal_types= mongo.db.meal_types.find(), # Gets the values from the meal_types collection #\n            cuisine_types= mongo.db.cuisine_types.find(), # Gets the values from the cuisine_types collection #\n            special_diet= mongo.db.special_diets.find(), # Gets the values from the special_diets collection #                       \n            username=mongo.db.users.find_one({\"username\": session['username']}))\n\n# When Like Button is clicked it Increses Likes in the database of that recipe by 1 each time #\n@app.route('/increase_recipe_likes', methods=['POST', 'GET'])\ndef increase_recipe_likes():\n    if 'username' in session:\n        mongo.db.meal_type.update( {\"_id\": ObjectId((request.form['increase_likes_button']))}, { \"$inc\": { \"likes\": 1 } } )#Increments by one on each click#\n        the_task =  mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['increase_likes_button']))} )\n        return render_template('recipe_page.html', task=the_task,#Refreshes the current page with flash message and updated like#\n        flash=flash('Thanks For Rating This Recipe!'),\n        username=mongo.db.users.find_one({\"username\": session['username']}))\n    return render_template('recipe_page.html', task=the_task, #Cannot like a recipe if not logged in#\n    flash=flash('Sorry You must be logged in to Like a Recipe'))\n\n    \n# When Dislike Button is clicked it Increses Dislikes in the database of that recipe by 1 each time #    \n@app.route('/increase_recipe_dislikes', methods=['POST', 'GET'])\ndef increase_recipe_dislikes():\n    if 'username' in session:\n        mongo.db.meal_type.update_one({'_id': ObjectId((request.form['increase_dislikes_button']))}, { \"$inc\": { \"dislikes\": 1 } })#Increments by one on each click#\n        the_task =  mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['increase_dislikes_button']))} )\n        return render_template('recipe_page.html', task=the_task, #Refreshes the current page with flash message and updated dislike#\n        flash=flash('Thanks For Rating This Recipe!'),\n        username=mongo.db.users.find_one({\"username\": session['username']}))\n    return render_template('recipe_page.html', task=the_task, #Cannot dislike a recipe if not logged in#\n    flash=flash('Sorry You must be logged in to Dislike a Recipe'))\n\n# If a comment is made it is added to the specific recipe as an array, further comments are added to this array.#\n# If the comment key doesn't exist it is added#\n@app.route('/add_comment/<search>', methods=['POST', 'GET'])\ndef add_comment(search):\n    if 'username' in session:\n        # if comments array is empty it removes the default 'No Comments Yet' before adding the new comment#\n        recipe = mongo.db.meal_type.find_one( { '$and': [ {\"_id\": ObjectId((request.form['add_comment_button']))}, {'comments': ['No Comments Yet'] } ] })\n        if recipe is not None:\n            mongo.db.meal_type.update_one({'_id': ObjectId((request.form['add_comment_button']))}, { \"$set\": { \"comments\": [] } })\n            add_this_comment = request.form['comment']# Get the comment from the form #\n            mongo.db.meal_type.update( {\"_id\": ObjectId((request.form['add_comment_button']))}, { \"$push\": { \"comments\": add_this_comment }})# Add the new comment to the array #\n            the_task =  mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['add_comment_button']))} )\n            return render_template('recipe_page.html', task=the_task,# Refreshes the page with flash message and updated comment#\n            flash=flash('Thank You For Your Comment!'),\n            username=mongo.db.users.find_one({\"username\": session['username']}))\n        add_this_comment = request.form['comment']# Get the comment from the form #\n        mongo.db.meal_type.update( {\"_id\": ObjectId((request.form['add_comment_button']))}, { \"$push\": { \"comments\": add_this_comment }})# Add the new comment to the array #\n        the_task =  mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['add_comment_button']))} )\n        return render_template('recipe_page.html', task=the_task,# Refreshes the page with flash message and updated comment#\n        flash=flash('Thank You For Your Comment!'),\n        username=mongo.db.users.find_one({\"username\": session['username']}))    \n    return render_template('recipe_page.html', task=the_task, #Cannot comment on a recipe if not logged in#\n    flash=flash('Sorry You must be logged in to Dislike a Recipe'))\n            \n\n# Search the database for matching word/s in the Meal Title or Ingredients fields  #    \n@app.route('/search', methods=['POST', 'GET'])\ndef search():\n    search = request.form['search']# get value from the search input field#\n    title_results =  mongo.db.meal_type.find( { '$or': [ {'meal_title': { '$regex': search,  '$options': 'i' }}, #searches for the word/s in all meal_title keys in the database#\n        #searches for the word/s in all ingredients keys in the database#\n        {'input_ingredients': { '$regex': search, '$options': 'i' }},\n        {'Field2_input_ingredients': { '$regex': search,  '$options': 'i' }}, {'Field3_input_ingredients': { '$regex': search,  '$options': 'i' }},\n        {'Field4_input_ingredients': { '$regex': search,  '$options': 'i' }}, {'Field5_input_ingredients': { '$regex': search,  '$options': 'i' }},\n        {'Field6_input_ingredients': { '$regex': search,  '$options': 'i' }}, {'Field7_input_ingredients': { '$regex': search,  '$options': 'i' }},\n        {'Field8_input_ingredients': { '$regex': search,  '$options': 'i' }}, {'Field9_input_ingredients': { '$regex': search,  '$options': 'i' }},\n        {'Field10_input_ingredients': { '$regex': search,  '$options': 'i' }}] })\n  \n    #Filters out multiples of the same recipe being returned to the user ie. if 'cheese' is searched for and it is in the meal title and ingredients,#\n    # it will only return the recipe once and not multiple times#\n    unique = [] # Initially empty variable#\n    for i in title_results:    \n        if not i in unique:# If the recipe is not already in unique append it to unique#  \n            unique.append(i)\n    return render_template('search_results.html', # Returns the list of results to the search_results page#\n        meal_type_category= meal_types_category,\n        cuisine_type_category= cuisine_type_categories,\n        special_diet_type_category= special_diet_type_category,\n        difficulty_type_category= difficulty_type_category,\n        task=unique)\n\n\n# Get's the _id of the recipe, queries the database for the specific recipe details, renders the edit_recipe.html page with the recipe data for updating #\n@app.route('/edit_recipe/<search>', methods=['POST', 'GET'])\ndef edit_recipe(search):\n    the_task =  mongo.db.meal_type.find_one({\"_id\": ObjectId((request.form['edit_button']))})\n    all_categories =  mongo.db.meal_type.find()\n    if 'username' in session:\n        if session.get(\"username\") == the_task.get(\"chef_name\"): #Only the person who origionaly inputted the recipe can modify it#\n            return render_template('edit_recipe.html', task=the_task,\n            categories=all_categories,\n            meal_types= mongo.db.meal_types.find(), # Gets the values from the meal_types collection #\n            cuisine_types= mongo.db.cuisine_types.find(), # Gets the values from the cuisine_types collection #\n            special_diet= mongo.db.special_diets.find(), # Gets the values from the special_diets collection #                       \n            username=mongo.db.users.find_one({\"username\": session['username']}))\n        return render_template(\"add_recipe.html\", #If the user is not the chef it will bring them to the add_recipe page to add their own recipe#\n        meal_types= mongo.db.meal_types.find(),\n        cuisine_types= mongo.db.cuisine_types.find(),\n        special_diet= mongo.db.special_diets.find(),\n        flash=flash('You must be the Chef who Added The Recipe, please add your own recipe below!'),\n        username=mongo.db.users.find_one({\"username\": session['username']})) \n    return render_template('register_login.html', # If the user is not logged in they will be brought to the register_login page to do so with a message explaining why#\n    flash=flash('You Must be Logged In To Edit A Recipe!'))    \n            \n#Function to update recipe in database#\n@app.route('/update_recipe', methods=['POST', 'GET']) \ndef update_recipe():\n    # Get the current ratings (likes/ dislikes/ comments and stores them in variables before they are deleted in the database) #\n    ratings = mongo.db.meal_type.find_one({\"_id\": ObjectId((request.form['recipe_update-button']))})\n    likes_count = ratings.get('likes')\n    dislikes_count = ratings.get('dislikes')\n    comments_count = ratings.get('comments')\n    # Replace the recipe with id in the form with this new data, completely wipes all origional data so current likes/dislike & comments are added form the variables and not the form#\n    mongo.db.meal_type.find_one_and_replace( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n        {\"meal_title\": (request.form['meal_title']), \"chef_name\": (request.form['chef_name']),\n            \"meal_type\": (request.form['meal_type']), \"difficulty\": (request.form['difficulty']),\n            \"prep_time\": (request.form['prep_time']), \"cook_time\": (request.form['cook_time']),\n            \"servings\": (request.form['servings']), \"calories\": (request.form['calories']),\n            \"special_diet\": (request.form['special_diet']), \"image_url\": (request.form['image_url']),\n            \"likes\": likes_count, \"dislikes\": dislikes_count, \"cuisine_type\": (request.form['cuisine_type']),\n            \"comments\": comments_count, \"input_ingredients\": (request.form['input_ingredients']),\n            \"input_instructions\": (request.form['input_instructions'])\n        })\n    # Input Ingredients #\n    # Finds the current amount of fields used in the edit_recipe form and adds only the amount of fields needed with the updated data#\n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field10_input_ingredients']): \n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients']),\n                    \"Field6_input_ingredients\": (request.form['Field6_input_ingredients']), \"Field7_input_ingredients\": (request.form['Field7_input_ingredients']),\n                    \"Field8_input_ingredients\": (request.form['Field8_input_ingredients']), \"Field9_input_ingredients\": (request.form['Field9_input_ingredients']),\n                    \"Field10_input_ingredients\": (request.form['Field10_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field9_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients']),\n                    \"Field6_input_ingredients\": (request.form['Field6_input_ingredients']), \"Field7_input_ingredients\": (request.form['Field7_input_ingredients']),\n                    \"Field8_input_ingredients\": (request.form['Field8_input_ingredients']), \"Field9_input_ingredients\": (request.form['Field9_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field8_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients']),\n                    \"Field6_input_ingredients\": (request.form['Field6_input_ingredients']), \"Field7_input_ingredients\": (request.form['Field7_input_ingredients']),\n                    \"Field8_input_ingredients\": (request.form['Field8_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field7_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients']),\n                    \"Field6_input_ingredients\": (request.form['Field6_input_ingredients']), \"Field7_input_ingredients\": (request.form['Field7_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field6_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients']),\n                    \"Field6_input_ingredients\": (request.form['Field6_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field5_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients']), \"Field5_input_ingredients\": (request.form['Field5_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field4_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients']),\n                    \"Field4_input_ingredients\": (request.form['Field4_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field3_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients']), \"Field3_input_ingredients\": (request.form['Field3_input_ingredients'])\n                }})\n    except KeyError:\n        pass                                        \n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['Field2_input_ingredients']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"Field2_input_ingredients\": (request.form['Field2_input_ingredients'])\n                }})\n    except KeyError:\n        pass\n   \n   \n    # Input Instructions #\n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID10_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions']),\n                    \"ID6_input_instructions\": (request.form['ID6_input_instructions']), \"ID7_input_instructions\": (request.form['ID7_input_instructions']),\n                    \"ID8_input_instructions\": (request.form['ID8_input_instructions']), \"ID9_input_instructions\": (request.form['ID9_input_instructions']),\n                    \"ID10_input_instructions\": (request.form['ID10_input_instructions'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#    \n        if (request.form['ID9_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))}, \n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions']),\n                    \"ID6_input_instructions\": (request.form['ID6_input_instructions']), \"ID7_input_instructions\": (request.form['ID7_input_instructions']),\n                    \"ID8_input_instructions\": (request.form['ID8_input_instructions']), \"ID9_input_instructions\": (request.form['ID9_input_instructions'])\n                }})\n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID8_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions']),\n                    \"ID6_input_instructions\": (request.form['ID6_input_instructions']), \"ID7_input_instructions\": (request.form['ID7_input_instructions']),\n                    \"ID8_input_instructions\": (request.form['ID8_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#    \n        if (request.form['ID7_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions']),\n                    \"ID6_input_instructions\": (request.form['ID6_input_instructions']), \"ID7_input_instructions\": (request.form['ID7_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID6_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions']),\n                    \"ID6_input_instructions\": (request.form['ID6_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID5_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions']), \"ID5_input_instructions\": (request.form['ID5_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID4_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions']),\n                    \"ID4_input_instructions\": (request.form['ID4_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form# \n        if (request.form['ID3_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions']), \"ID3_input_instructions\": (request.form['ID3_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    try: # if this field exists in the form do the below if not don't give an error but try the next #\n    # Only calls the database when it finds the highest numbered field in the form#\n        if (request.form['ID2_input_instructions']):\n            mongo.db.meal_type.find_one_and_update( {\"_id\": ObjectId((request.form['recipe_update-button']))},\n                { \"$set\":  \n                    {\"ID2_input_instructions\": (request.form['ID2_input_instructions'])\n                }}) \n    except KeyError:\n        pass\n    \n    # If the image_url is empty or has been removed then update it to the default value #\n    mongo.db.meal_type.find_and_modify( {'image_url': ''}, update={\"$set\": {'image_url': 'https://images.pexels.com/photos/1268558/pexels-photo-1268558.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'}})\n    return render_template(\"home.html\", \n    most_liked=mongo.db.meal_type.find(),\n    favourites=mongo.db.meal_type.find(),\n    meal_type_category=meal_types_category,\n    cuisine_type_category=cuisine_type_categories,\n    special_diet_type_category= special_diet_type_category,\n    difficulty_type_category=difficulty_type_category,\n    username=mongo.db.users.find_one({\"username\": session['username']}))\n\n# Function for deleting Recipe. Can only be accessed from the edit_recipe page so only available to the recipe owner#            \n@app.route('/delete_recipe', methods=['POST'])\ndef delete_recipe():\n    mongo.db.meal_type.remove({'_id': ObjectId((request.form['recipe_delete-button']))})\n    return render_template(\"home.html\", \n    most_liked=mongo.db.meal_type.find(),\n    favourites=mongo.db.meal_type.find(),\n    meal_type_category=meal_types_category,\n    cuisine_type_category=cuisine_type_categories,\n    special_diet_type_category= special_diet_type_category,\n    difficulty_type_category=difficulty_type_category,\n    flash=flash('The Recipe Has Been Deleted!'),\n    username=mongo.db.users.find_one({\"username\": session['username']}))\n\n\n# If Logout Button is clicked then it removes the session cookie and brings them to the register page with message #\n@app.route('/logout')\ndef logout():\n    session.clear()\n    return render_template('register_login.html',\n        flash=flash('You have been Signed Out!'))\n\n# Modal buttons on Hompage, #\n# Queries database and shows in Modal the list of that particlular Key #\n# When value in modal is choosen it will display a list of recipes that contain that value if they exist#\n@app.route('/category_results', methods=['POST', 'GET'])\ndef category_results():\n    if request.form['type_category_button'] in ('Breakfast', 'Lunch', 'Dinner', 'Dessert', 'Snack'):\n        category_results=mongo.db.meal_type.find({'meal_type': request.form['type_category_button']})\n        if 'username' in session:\n            return render_template('search_results.html',\n            meal_type_category= meal_types_category,\n            cuisine_type_category=cuisine_type_categories,\n            special_diet_type_category=special_diet_type_category,\n            difficulty_type_category=difficulty_type_category,\n            username=mongo.db.users.find_one({\"username\": session['username']}),\n            task=category_results)\n        return render_template('search_results.html',\n        meal_type_category= meal_types_category,\n        cuisine_type_category=cuisine_type_categories,\n        special_diet_type_category=special_diet_type_category,\n        difficulty_type_category=difficulty_type_category,\n        task=category_results)\n        \n        # Complete list of Cuisine Origins if they are not in any recipe in the database then they will not be shown to the user #\n    elif request.form['type_category_button'] in ('American', 'Chinese', 'French', 'Greek', 'Indian', 'Irish', 'Italian', 'Mexican', 'Thai', 'Turkish', 'Other'):\n         category_results=mongo.db.meal_type.find({'cuisine_type': request.form['type_category_button']})\n         if 'username' in session:\n            return render_template('search_results.html',\n            meal_type_category= meal_types_category,\n            cuisine_type_category=cuisine_type_categories,\n            special_diet_type_category=special_diet_type_category,\n            difficulty_type_category=difficulty_type_category,\n            username=mongo.db.users.find_one({\"username\": session['username']}),\n            task=category_results)\n         return render_template('search_results.html',\n         meal_type_category= meal_types_category,\n         cuisine_type_category=cuisine_type_categories,\n         special_diet_type_category=special_diet_type_category,\n         difficulty_type_category=difficulty_type_category,\n         task=category_results)\n                 # Complete list of Special Diets if they are not in any recipe in the database then they will not be shown to the user #\n    elif request.form['type_category_button'] in ('Vegetarian', 'Vegan', 'Weight Watchers', 'Gluten-free', 'Ketogenic', 'High-protein', 'Low Fat', 'Low-Carb', 'Other Diet', 'Not Applicable'):\n         category_results=mongo.db.meal_type.find({'special_diet': request.form['type_category_button']})\n         if 'username' in session:\n            return render_template('search_results.html',\n            meal_type_category= meal_types_category,\n            cuisine_type_category=cuisine_type_categories,\n            special_diet_type_category=special_diet_type_category,\n            difficulty_type_category=difficulty_type_category,\n            username=mongo.db.users.find_one({\"username\": session['username']}),\n            task=category_results)\n         return render_template('search_results.html',\n         meal_type_category= meal_types_category,\n         cuisine_type_category=cuisine_type_categories,\n         special_diet_type_category=special_diet_type_category,\n         difficulty_type_category=difficulty_type_category,\n         task=category_results)\n         \n    elif request.form['type_category_button'] in ('Easy', 'Medium', 'Hard'):\n         category_results=mongo.db.meal_type.find({'difficulty': request.form['type_category_button']})\n         if 'username' in session:\n            return render_template('search_results.html',\n            meal_type_category= meal_types_category,\n            cuisine_type_category=cuisine_type_categories,\n            special_diet_type_category=special_diet_type_category,\n            difficulty_type_category=difficulty_type_category,\n            username=mongo.db.users.find_one({\"username\": session['username']}),\n            task=category_results)\n         return render_template('search_results.html',\n         meal_type_category= meal_types_category,\n         cuisine_type_category=cuisine_type_categories,\n         special_diet_type_category=special_diet_type_category,\n         difficulty_type_category=difficulty_type_category,\n         task=category_results)     \n\n\n# Contact Us Form and Function for Sending the email#\n@app.route('/contact_us', methods=['POST', 'GET'])\ndef contact_us():\n    return render_template('contact_us.html')\n\n@app.route('/send_email', methods=['POST', 'GET'])\ndef send_email():\n    email = Message('You Have Mail', recipients=[MAIL_RECIPIENT])\n    msg_name = request.form['name']\n    msg_email = request.form['email_address']\n    msg_message = request.form['message']\n    email.html = 'From:'+ msg_name + '<br> Email:'+ msg_email + '<br> Message: <br>' + msg_message\n    \n    mail.send(email)\n    return render_template('contact_us.html',\n    flash= flash('Your Email Has been Sent!'))\n\n\nif __name__ == '__main__':\n    app.secret_key = SECRET_KEY\n    app.run(host=HOST, port=PORT, debug=DEBUG)","undoManager":{"mark":62,"position":100,"stack":[[{"start":{"row":511,"column":24},"end":{"row":511,"column":48},"action":"remove","lines":["You have been Signed Out"],"id":4341},{"start":{"row":511,"column":24},"end":{"row":511,"column":25},"action":"insert","lines":["T"]},{"start":{"row":511,"column":25},"end":{"row":511,"column":26},"action":"insert","lines":["h"]},{"start":{"row":511,"column":26},"end":{"row":511,"column":27},"action":"insert","lines":["e"]}],[{"start":{"row":511,"column":27},"end":{"row":511,"column":28},"action":"insert","lines":[" "],"id":4342},{"start":{"row":511,"column":28},"end":{"row":511,"column":29},"action":"insert","lines":["R"]},{"start":{"row":511,"column":29},"end":{"row":511,"column":30},"action":"insert","lines":["e"]},{"start":{"row":511,"column":30},"end":{"row":511,"column":31},"action":"insert","lines":["c"]},{"start":{"row":511,"column":31},"end":{"row":511,"column":32},"action":"insert","lines":["i"]},{"start":{"row":511,"column":32},"end":{"row":511,"column":33},"action":"insert","lines":["p"]},{"start":{"row":511,"column":33},"end":{"row":511,"column":34},"action":"insert","lines":["e"]}],[{"start":{"row":511,"column":34},"end":{"row":511,"column":35},"action":"insert","lines":[" "],"id":4343},{"start":{"row":511,"column":35},"end":{"row":511,"column":36},"action":"insert","lines":["H"]},{"start":{"row":511,"column":36},"end":{"row":511,"column":37},"action":"insert","lines":["a"]},{"start":{"row":511,"column":37},"end":{"row":511,"column":38},"action":"insert","lines":["s"]}],[{"start":{"row":511,"column":38},"end":{"row":511,"column":39},"action":"insert","lines":[" "],"id":4344},{"start":{"row":511,"column":39},"end":{"row":511,"column":40},"action":"insert","lines":["B"]},{"start":{"row":511,"column":40},"end":{"row":511,"column":41},"action":"insert","lines":["e"]},{"start":{"row":511,"column":41},"end":{"row":511,"column":42},"action":"insert","lines":["e"]},{"start":{"row":511,"column":42},"end":{"row":511,"column":43},"action":"insert","lines":["n"]}],[{"start":{"row":511,"column":43},"end":{"row":511,"column":44},"action":"insert","lines":[" "],"id":4345},{"start":{"row":511,"column":44},"end":{"row":511,"column":45},"action":"insert","lines":["D"]},{"start":{"row":511,"column":45},"end":{"row":511,"column":46},"action":"insert","lines":["e"]},{"start":{"row":511,"column":46},"end":{"row":511,"column":47},"action":"insert","lines":["l"]},{"start":{"row":511,"column":47},"end":{"row":511,"column":48},"action":"insert","lines":["e"]},{"start":{"row":511,"column":48},"end":{"row":511,"column":49},"action":"insert","lines":["t"]},{"start":{"row":511,"column":49},"end":{"row":511,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":511,"column":50},"end":{"row":511,"column":51},"action":"insert","lines":["d"],"id":4346}],[{"start":{"row":158,"column":90},"end":{"row":158,"column":159},"action":"remove","lines":["https://upload.wikimedia.org/wikipedia/en/f/f9/No-image-available.jpg"],"id":4347},{"start":{"row":158,"column":90},"end":{"row":158,"column":198},"action":"insert","lines":["https://images.pexels.com/photos/277253/pexels-photo-277253.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"]}],[{"start":{"row":200,"column":108},"end":{"row":201,"column":0},"action":"insert","lines":["",""],"id":4348},{"start":{"row":201,"column":0},"end":{"row":201,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":201,"column":8},"end":{"row":201,"column":100},"action":"insert","lines":["mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['increase_dislikes_button']))} )"],"id":4349}],[{"start":{"row":199,"column":29},"end":{"row":200,"column":0},"action":"insert","lines":["",""],"id":4350},{"start":{"row":200,"column":0},"end":{"row":200,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":200,"column":8},"end":{"row":200,"column":9},"action":"insert","lines":["r"],"id":4351},{"start":{"row":200,"column":9},"end":{"row":200,"column":10},"action":"insert","lines":["e"]},{"start":{"row":200,"column":10},"end":{"row":200,"column":11},"action":"insert","lines":["c"]},{"start":{"row":200,"column":11},"end":{"row":200,"column":12},"action":"insert","lines":["i"]},{"start":{"row":200,"column":12},"end":{"row":200,"column":13},"action":"insert","lines":["p"]},{"start":{"row":200,"column":13},"end":{"row":200,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":200,"column":13},"end":{"row":200,"column":14},"action":"remove","lines":["e"],"id":4352},{"start":{"row":200,"column":12},"end":{"row":200,"column":13},"action":"remove","lines":["p"]},{"start":{"row":200,"column":11},"end":{"row":200,"column":12},"action":"remove","lines":["i"]},{"start":{"row":200,"column":10},"end":{"row":200,"column":11},"action":"remove","lines":["c"]},{"start":{"row":200,"column":9},"end":{"row":200,"column":10},"action":"remove","lines":["e"]},{"start":{"row":200,"column":8},"end":{"row":200,"column":9},"action":"remove","lines":["r"]}],[{"start":{"row":200,"column":4},"end":{"row":200,"column":8},"action":"remove","lines":["    "],"id":4353},{"start":{"row":200,"column":0},"end":{"row":200,"column":4},"action":"remove","lines":["    "]},{"start":{"row":199,"column":29},"end":{"row":200,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":201,"column":8},"end":{"row":201,"column":9},"action":"insert","lines":["r"],"id":4354},{"start":{"row":201,"column":9},"end":{"row":201,"column":10},"action":"insert","lines":["e"]},{"start":{"row":201,"column":10},"end":{"row":201,"column":11},"action":"insert","lines":["c"]},{"start":{"row":201,"column":11},"end":{"row":201,"column":12},"action":"insert","lines":["i"]},{"start":{"row":201,"column":12},"end":{"row":201,"column":13},"action":"insert","lines":["p"]},{"start":{"row":201,"column":13},"end":{"row":201,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":201,"column":14},"end":{"row":201,"column":15},"action":"insert","lines":[" "],"id":4355},{"start":{"row":201,"column":15},"end":{"row":201,"column":16},"action":"insert","lines":["="]}],[{"start":{"row":201,"column":16},"end":{"row":201,"column":17},"action":"insert","lines":[" "],"id":4356}],[{"start":{"row":201,"column":78},"end":{"row":201,"column":102},"action":"remove","lines":["increase_dislikes_button"],"id":4357},{"start":{"row":201,"column":78},"end":{"row":201,"column":96},"action":"insert","lines":["add_comment_button"]}],[{"start":{"row":201,"column":47},"end":{"row":201,"column":48},"action":"insert","lines":[" "],"id":4358}],[{"start":{"row":201,"column":48},"end":{"row":201,"column":53},"action":"insert","lines":["$and:"],"id":4359}],[{"start":{"row":201,"column":53},"end":{"row":201,"column":54},"action":"insert","lines":[" "],"id":4360}],[{"start":{"row":201,"column":54},"end":{"row":201,"column":55},"action":"insert","lines":["["],"id":4361}],[{"start":{"row":201,"column":55},"end":{"row":201,"column":56},"action":"insert","lines":[" "],"id":4362},{"start":{"row":201,"column":56},"end":{"row":201,"column":57},"action":"insert","lines":["{"]}],[{"start":{"row":201,"column":111},"end":{"row":201,"column":112},"action":"insert","lines":[","],"id":4363}],[{"start":{"row":201,"column":112},"end":{"row":201,"column":113},"action":"insert","lines":[" "],"id":4364},{"start":{"row":201,"column":113},"end":{"row":201,"column":114},"action":"insert","lines":["{"]},{"start":{"row":201,"column":114},"end":{"row":201,"column":115},"action":"insert","lines":["}"]}],[{"start":{"row":201,"column":114},"end":{"row":201,"column":147},"action":"insert","lines":["{'comments': ['No Comments Yet']}"],"id":4365}],[{"start":{"row":201,"column":114},"end":{"row":201,"column":115},"action":"remove","lines":["{"],"id":4366}],[{"start":{"row":201,"column":145},"end":{"row":201,"column":146},"action":"remove","lines":["}"],"id":4367}],[{"start":{"row":202,"column":8},"end":{"row":203,"column":0},"action":"insert","lines":["",""],"id":4368},{"start":{"row":203,"column":0},"end":{"row":203,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":202,"column":8},"end":{"row":202,"column":9},"action":"insert","lines":["i"],"id":4369},{"start":{"row":202,"column":9},"end":{"row":202,"column":10},"action":"insert","lines":["f"]}],[{"start":{"row":202,"column":10},"end":{"row":202,"column":11},"action":"insert","lines":[" "],"id":4370},{"start":{"row":202,"column":11},"end":{"row":202,"column":12},"action":"insert","lines":["r"]},{"start":{"row":202,"column":12},"end":{"row":202,"column":13},"action":"insert","lines":["e"]},{"start":{"row":202,"column":13},"end":{"row":202,"column":14},"action":"insert","lines":["c"]},{"start":{"row":202,"column":14},"end":{"row":202,"column":15},"action":"insert","lines":["i"]},{"start":{"row":202,"column":15},"end":{"row":202,"column":16},"action":"insert","lines":["p"]},{"start":{"row":202,"column":16},"end":{"row":202,"column":17},"action":"insert","lines":["e"]}],[{"start":{"row":202,"column":17},"end":{"row":202,"column":18},"action":"insert","lines":[" "],"id":4371},{"start":{"row":202,"column":18},"end":{"row":202,"column":19},"action":"insert","lines":["i"]},{"start":{"row":202,"column":19},"end":{"row":202,"column":20},"action":"insert","lines":["s"]}],[{"start":{"row":202,"column":20},"end":{"row":202,"column":21},"action":"insert","lines":[" "],"id":4372},{"start":{"row":202,"column":21},"end":{"row":202,"column":22},"action":"insert","lines":["n"]},{"start":{"row":202,"column":22},"end":{"row":202,"column":23},"action":"insert","lines":["o"]},{"start":{"row":202,"column":23},"end":{"row":202,"column":24},"action":"insert","lines":["t"]}],[{"start":{"row":202,"column":24},"end":{"row":202,"column":25},"action":"insert","lines":[" "],"id":4373},{"start":{"row":202,"column":25},"end":{"row":202,"column":26},"action":"insert","lines":["N"]},{"start":{"row":202,"column":26},"end":{"row":202,"column":27},"action":"insert","lines":["o"]},{"start":{"row":202,"column":27},"end":{"row":202,"column":28},"action":"insert","lines":["n"]},{"start":{"row":202,"column":28},"end":{"row":202,"column":29},"action":"insert","lines":["e"]}],[{"start":{"row":202,"column":29},"end":{"row":202,"column":30},"action":"insert","lines":[":"],"id":4374}],[{"start":{"row":203,"column":8},"end":{"row":203,"column":114},"action":"remove","lines":["mongo.db.meal_type.find_and_modify( {'comments': ['No Comments Yet']}, update={\"$set\": {'comments': [] }})"],"id":4375},{"start":{"row":203,"column":8},"end":{"row":203,"column":132},"action":"insert","lines":[" mongo.db.meal_type.update_one({'_id': ObjectId((request.form['increase_dislikes_button']))}, { \"$inc\": { \"dislikes\": 1 } })"]}],[{"start":{"row":203,"column":8},"end":{"row":203,"column":9},"action":"remove","lines":[" "],"id":4376}],[{"start":{"row":203,"column":70},"end":{"row":203,"column":94},"action":"remove","lines":["increase_dislikes_button"],"id":4377},{"start":{"row":203,"column":70},"end":{"row":203,"column":88},"action":"insert","lines":["add_comment_button"]}],[{"start":{"row":203,"column":99},"end":{"row":203,"column":102},"action":"remove","lines":["inc"],"id":4378},{"start":{"row":203,"column":99},"end":{"row":203,"column":100},"action":"insert","lines":["s"]},{"start":{"row":203,"column":100},"end":{"row":203,"column":101},"action":"insert","lines":["e"]},{"start":{"row":203,"column":101},"end":{"row":203,"column":102},"action":"insert","lines":["t"]}],[{"start":{"row":203,"column":108},"end":{"row":203,"column":116},"action":"remove","lines":["dislikes"],"id":4379},{"start":{"row":203,"column":108},"end":{"row":203,"column":109},"action":"insert","lines":["c"]},{"start":{"row":203,"column":109},"end":{"row":203,"column":110},"action":"insert","lines":["o"]},{"start":{"row":203,"column":110},"end":{"row":203,"column":111},"action":"insert","lines":["m"]},{"start":{"row":203,"column":111},"end":{"row":203,"column":112},"action":"insert","lines":["m"]},{"start":{"row":203,"column":112},"end":{"row":203,"column":113},"action":"insert","lines":["e"]},{"start":{"row":203,"column":113},"end":{"row":203,"column":114},"action":"insert","lines":["n"]},{"start":{"row":203,"column":114},"end":{"row":203,"column":115},"action":"insert","lines":["t"]},{"start":{"row":203,"column":115},"end":{"row":203,"column":116},"action":"insert","lines":["s"]}],[{"start":{"row":203,"column":119},"end":{"row":203,"column":120},"action":"remove","lines":["1"],"id":4380},{"start":{"row":203,"column":119},"end":{"row":203,"column":120},"action":"insert","lines":["["]},{"start":{"row":203,"column":120},"end":{"row":203,"column":121},"action":"insert","lines":["]"]}],[{"start":{"row":203,"column":0},"end":{"row":203,"column":4},"action":"insert","lines":["    "],"id":4381},{"start":{"row":204,"column":0},"end":{"row":204,"column":4},"action":"insert","lines":["    "]},{"start":{"row":205,"column":0},"end":{"row":205,"column":4},"action":"insert","lines":["    "]},{"start":{"row":206,"column":0},"end":{"row":206,"column":4},"action":"insert","lines":["    "]},{"start":{"row":207,"column":0},"end":{"row":207,"column":4},"action":"insert","lines":["    "]},{"start":{"row":208,"column":0},"end":{"row":208,"column":4},"action":"insert","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":209,"column":80},"end":{"row":210,"column":0},"action":"insert","lines":["",""],"id":4382},{"start":{"row":210,"column":0},"end":{"row":210,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":210,"column":8},"end":{"row":215,"column":80},"action":"insert","lines":["add_this_comment = request.form['comment']# Get the comment from the form #","            mongo.db.meal_type.update( {\"_id\": ObjectId((request.form['add_comment_button']))}, { \"$push\": { \"comments\": add_this_comment }})# Add the new comment to the array #","            the_task =  mongo.db.meal_type.find_one( {\"_id\": ObjectId((request.form['add_comment_button']))} )","            return render_template('recipe_page.html', task=the_task,# Refreshes the page with flash message and updated comment#","            flash=flash('Thank You For Your Comment!'),","            username=mongo.db.users.find_one({\"username\": session['username']}))"],"id":4383}],[{"start":{"row":211,"column":8},"end":{"row":211,"column":12},"action":"remove","lines":["    "],"id":4384}],[{"start":{"row":212,"column":8},"end":{"row":212,"column":12},"action":"remove","lines":["    "],"id":4385}],[{"start":{"row":213,"column":8},"end":{"row":213,"column":12},"action":"remove","lines":["    "],"id":4386}],[{"start":{"row":214,"column":8},"end":{"row":214,"column":12},"action":"remove","lines":["    "],"id":4387}],[{"start":{"row":215,"column":8},"end":{"row":215,"column":12},"action":"remove","lines":["    "],"id":4388}],[{"start":{"row":201,"column":145},"end":{"row":201,"column":146},"action":"insert","lines":[" "],"id":4389},{"start":{"row":201,"column":146},"end":{"row":201,"column":147},"action":"insert","lines":["]"]}],[{"start":{"row":201,"column":48},"end":{"row":201,"column":49},"action":"insert","lines":["'"],"id":4390}],[{"start":{"row":201,"column":53},"end":{"row":201,"column":54},"action":"insert","lines":["'"],"id":4391}],[{"start":{"row":201,"column":148},"end":{"row":201,"column":149},"action":"remove","lines":["]"],"id":4392}],[{"start":{"row":201,"column":150},"end":{"row":201,"column":151},"action":"insert","lines":["]"],"id":4393}],[{"start":{"row":201,"column":151},"end":{"row":201,"column":152},"action":"insert","lines":[" "],"id":4394},{"start":{"row":201,"column":152},"end":{"row":201,"column":153},"action":"insert","lines":["}"]}],[{"start":{"row":518,"column":39},"end":{"row":519,"column":0},"action":"insert","lines":["",""],"id":4395},{"start":{"row":519,"column":0},"end":{"row":519,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":519,"column":4},"end":{"row":526,"column":72},"action":"insert","lines":["return render_template(\"home.html\", ","    most_liked=mongo.db.meal_type.find(),","    favourites=mongo.db.meal_type.find(),","    meal_type_category=meal_types_category,","    cuisine_type_category=cuisine_type_categories,","    special_diet_type_category= special_diet_type_category,","    difficulty_type_category=difficulty_type_category,","    username=mongo.db.users.find_one({\"username\": session['username']}))"],"id":4396}],[{"start":{"row":518,"column":0},"end":{"row":518,"column":39},"action":"remove","lines":["    return render_template('home.html',"],"id":4397},{"start":{"row":517,"column":88},"end":{"row":518,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":526,"column":54},"end":{"row":526,"column":55},"action":"remove","lines":[")"],"id":4398}],[{"start":{"row":526,"column":54},"end":{"row":526,"column":55},"action":"insert","lines":[","],"id":4399}],[{"start":{"row":524,"column":54},"end":{"row":525,"column":0},"action":"insert","lines":["",""],"id":4400},{"start":{"row":525,"column":0},"end":{"row":525,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":527,"column":0},"end":{"row":527,"column":55},"action":"remove","lines":["           flash=flash('The Recipe Has Been Deleted!'),"],"id":4401}],[{"start":{"row":525,"column":4},"end":{"row":525,"column":59},"action":"insert","lines":["           flash=flash('The Recipe Has Been Deleted!'),"],"id":4402}],[{"start":{"row":525,"column":14},"end":{"row":525,"column":15},"action":"remove","lines":[" "],"id":4403},{"start":{"row":525,"column":13},"end":{"row":525,"column":14},"action":"remove","lines":[" "]},{"start":{"row":525,"column":12},"end":{"row":525,"column":13},"action":"remove","lines":[" "]},{"start":{"row":525,"column":8},"end":{"row":525,"column":12},"action":"remove","lines":["    "]},{"start":{"row":525,"column":4},"end":{"row":525,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":514,"column":0},"end":{"row":515,"column":0},"action":"insert","lines":["",""],"id":4404},{"start":{"row":515,"column":0},"end":{"row":515,"column":1},"action":"insert","lines":["#"]},{"start":{"row":515,"column":1},"end":{"row":515,"column":2},"action":"insert","lines":["#"]}],[{"start":{"row":515,"column":1},"end":{"row":515,"column":2},"action":"insert","lines":[" "],"id":4405}],[{"start":{"row":515,"column":2},"end":{"row":515,"column":3},"action":"insert","lines":["F"],"id":4406},{"start":{"row":515,"column":3},"end":{"row":515,"column":4},"action":"insert","lines":["u"]},{"start":{"row":515,"column":4},"end":{"row":515,"column":5},"action":"insert","lines":["n"]},{"start":{"row":515,"column":5},"end":{"row":515,"column":6},"action":"insert","lines":["c"]},{"start":{"row":515,"column":6},"end":{"row":515,"column":7},"action":"insert","lines":["t"]},{"start":{"row":515,"column":7},"end":{"row":515,"column":8},"action":"insert","lines":["i"]},{"start":{"row":515,"column":8},"end":{"row":515,"column":9},"action":"insert","lines":["o"]},{"start":{"row":515,"column":9},"end":{"row":515,"column":10},"action":"insert","lines":["n"]}],[{"start":{"row":515,"column":10},"end":{"row":515,"column":11},"action":"insert","lines":[" "],"id":4407},{"start":{"row":515,"column":11},"end":{"row":515,"column":12},"action":"insert","lines":["f"]},{"start":{"row":515,"column":12},"end":{"row":515,"column":13},"action":"insert","lines":["o"]},{"start":{"row":515,"column":13},"end":{"row":515,"column":14},"action":"insert","lines":["r"]}],[{"start":{"row":515,"column":14},"end":{"row":515,"column":15},"action":"insert","lines":[" "],"id":4408},{"start":{"row":515,"column":15},"end":{"row":515,"column":16},"action":"insert","lines":["d"]},{"start":{"row":515,"column":16},"end":{"row":515,"column":17},"action":"insert","lines":["e"]},{"start":{"row":515,"column":17},"end":{"row":515,"column":18},"action":"insert","lines":["l"]},{"start":{"row":515,"column":18},"end":{"row":515,"column":19},"action":"insert","lines":["e"]},{"start":{"row":515,"column":19},"end":{"row":515,"column":20},"action":"insert","lines":["t"]},{"start":{"row":515,"column":20},"end":{"row":515,"column":21},"action":"insert","lines":["i"]},{"start":{"row":515,"column":21},"end":{"row":515,"column":22},"action":"insert","lines":["n"]},{"start":{"row":515,"column":22},"end":{"row":515,"column":23},"action":"insert","lines":["g"]}],[{"start":{"row":515,"column":23},"end":{"row":515,"column":24},"action":"insert","lines":[" "],"id":4409},{"start":{"row":515,"column":24},"end":{"row":515,"column":25},"action":"insert","lines":["R"]},{"start":{"row":515,"column":25},"end":{"row":515,"column":26},"action":"insert","lines":["e"]},{"start":{"row":515,"column":26},"end":{"row":515,"column":27},"action":"insert","lines":["i"]}],[{"start":{"row":515,"column":27},"end":{"row":515,"column":28},"action":"insert","lines":["p"],"id":4410},{"start":{"row":515,"column":28},"end":{"row":515,"column":29},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":26},"end":{"row":515,"column":27},"action":"insert","lines":["c"],"id":4411}],[{"start":{"row":515,"column":30},"end":{"row":515,"column":31},"action":"insert","lines":[" "],"id":4412},{"start":{"row":515,"column":31},"end":{"row":515,"column":32},"action":"insert","lines":["C"]},{"start":{"row":515,"column":32},"end":{"row":515,"column":33},"action":"insert","lines":["a"]},{"start":{"row":515,"column":33},"end":{"row":515,"column":34},"action":"insert","lines":["n"]}],[{"start":{"row":515,"column":34},"end":{"row":515,"column":35},"action":"insert","lines":[" "],"id":4413},{"start":{"row":515,"column":35},"end":{"row":515,"column":36},"action":"insert","lines":["o"]},{"start":{"row":515,"column":36},"end":{"row":515,"column":37},"action":"insert","lines":["n"]},{"start":{"row":515,"column":37},"end":{"row":515,"column":38},"action":"insert","lines":["l"]},{"start":{"row":515,"column":38},"end":{"row":515,"column":39},"action":"insert","lines":["y"]}],[{"start":{"row":515,"column":39},"end":{"row":515,"column":40},"action":"insert","lines":[" "],"id":4414},{"start":{"row":515,"column":40},"end":{"row":515,"column":41},"action":"insert","lines":["b"]},{"start":{"row":515,"column":41},"end":{"row":515,"column":42},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":42},"end":{"row":515,"column":43},"action":"insert","lines":[" "],"id":4415},{"start":{"row":515,"column":43},"end":{"row":515,"column":44},"action":"insert","lines":["a"]}],[{"start":{"row":515,"column":44},"end":{"row":515,"column":45},"action":"insert","lines":["c"],"id":4416},{"start":{"row":515,"column":45},"end":{"row":515,"column":46},"action":"insert","lines":["c"]},{"start":{"row":515,"column":46},"end":{"row":515,"column":47},"action":"insert","lines":["e"]},{"start":{"row":515,"column":47},"end":{"row":515,"column":48},"action":"insert","lines":["s"]},{"start":{"row":515,"column":48},"end":{"row":515,"column":49},"action":"insert","lines":["s"]},{"start":{"row":515,"column":49},"end":{"row":515,"column":50},"action":"insert","lines":["e"]},{"start":{"row":515,"column":50},"end":{"row":515,"column":51},"action":"insert","lines":["s"]}],[{"start":{"row":515,"column":50},"end":{"row":515,"column":51},"action":"remove","lines":["s"],"id":4417}],[{"start":{"row":515,"column":50},"end":{"row":515,"column":51},"action":"insert","lines":["d"],"id":4418}],[{"start":{"row":515,"column":51},"end":{"row":515,"column":52},"action":"insert","lines":[" "],"id":4419},{"start":{"row":515,"column":52},"end":{"row":515,"column":53},"action":"insert","lines":["f"]},{"start":{"row":515,"column":53},"end":{"row":515,"column":54},"action":"insert","lines":["r"]},{"start":{"row":515,"column":54},"end":{"row":515,"column":55},"action":"insert","lines":["o"]},{"start":{"row":515,"column":55},"end":{"row":515,"column":56},"action":"insert","lines":["m"]}],[{"start":{"row":515,"column":56},"end":{"row":515,"column":57},"action":"insert","lines":[" "],"id":4420},{"start":{"row":515,"column":57},"end":{"row":515,"column":58},"action":"insert","lines":["t"]},{"start":{"row":515,"column":58},"end":{"row":515,"column":59},"action":"insert","lines":["h"]},{"start":{"row":515,"column":59},"end":{"row":515,"column":60},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":60},"end":{"row":515,"column":61},"action":"insert","lines":[" "],"id":4421},{"start":{"row":515,"column":61},"end":{"row":515,"column":62},"action":"insert","lines":["e"]},{"start":{"row":515,"column":62},"end":{"row":515,"column":63},"action":"insert","lines":["d"]},{"start":{"row":515,"column":63},"end":{"row":515,"column":64},"action":"insert","lines":["i"]},{"start":{"row":515,"column":64},"end":{"row":515,"column":65},"action":"insert","lines":["t"]}],[{"start":{"row":515,"column":65},"end":{"row":515,"column":66},"action":"insert","lines":[" "],"id":4422}],[{"start":{"row":515,"column":65},"end":{"row":515,"column":66},"action":"remove","lines":[" "],"id":4423}],[{"start":{"row":515,"column":65},"end":{"row":515,"column":66},"action":"insert","lines":["_"],"id":4424},{"start":{"row":515,"column":66},"end":{"row":515,"column":67},"action":"insert","lines":["r"]},{"start":{"row":515,"column":67},"end":{"row":515,"column":68},"action":"insert","lines":["e"]},{"start":{"row":515,"column":68},"end":{"row":515,"column":69},"action":"insert","lines":["c"]},{"start":{"row":515,"column":69},"end":{"row":515,"column":70},"action":"insert","lines":["i"]},{"start":{"row":515,"column":70},"end":{"row":515,"column":71},"action":"insert","lines":["p"]},{"start":{"row":515,"column":71},"end":{"row":515,"column":72},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":72},"end":{"row":515,"column":73},"action":"insert","lines":[" "],"id":4425},{"start":{"row":515,"column":73},"end":{"row":515,"column":74},"action":"insert","lines":["p"]},{"start":{"row":515,"column":74},"end":{"row":515,"column":75},"action":"insert","lines":["a"]},{"start":{"row":515,"column":75},"end":{"row":515,"column":76},"action":"insert","lines":["g"]},{"start":{"row":515,"column":76},"end":{"row":515,"column":77},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":77},"end":{"row":515,"column":78},"action":"insert","lines":[" "],"id":4426}],[{"start":{"row":515,"column":78},"end":{"row":515,"column":79},"action":"insert","lines":["t"],"id":4427},{"start":{"row":515,"column":79},"end":{"row":515,"column":80},"action":"insert","lines":["o"]}],[{"start":{"row":515,"column":80},"end":{"row":515,"column":81},"action":"insert","lines":[" "],"id":4428},{"start":{"row":515,"column":81},"end":{"row":515,"column":82},"action":"insert","lines":["k"]},{"start":{"row":515,"column":82},"end":{"row":515,"column":83},"action":"insert","lines":["e"]},{"start":{"row":515,"column":83},"end":{"row":515,"column":84},"action":"insert","lines":["e"]},{"start":{"row":515,"column":84},"end":{"row":515,"column":85},"action":"insert","lines":["p"]}],[{"start":{"row":515,"column":85},"end":{"row":515,"column":86},"action":"insert","lines":[" "],"id":4429},{"start":{"row":515,"column":86},"end":{"row":515,"column":87},"action":"insert","lines":["i"]},{"start":{"row":515,"column":87},"end":{"row":515,"column":88},"action":"insert","lines":["t"]}],[{"start":{"row":515,"column":88},"end":{"row":515,"column":89},"action":"insert","lines":[" "],"id":4430},{"start":{"row":515,"column":89},"end":{"row":515,"column":90},"action":"insert","lines":["s"]},{"start":{"row":515,"column":90},"end":{"row":515,"column":91},"action":"insert","lines":["e"]},{"start":{"row":515,"column":91},"end":{"row":515,"column":92},"action":"insert","lines":["c"]},{"start":{"row":515,"column":92},"end":{"row":515,"column":93},"action":"insert","lines":["u"]},{"start":{"row":515,"column":93},"end":{"row":515,"column":94},"action":"insert","lines":["r"]},{"start":{"row":515,"column":94},"end":{"row":515,"column":95},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":95},"end":{"row":515,"column":96},"action":"insert","lines":[" "],"id":4431}],[{"start":{"row":515,"column":95},"end":{"row":515,"column":96},"action":"remove","lines":[" "],"id":4432},{"start":{"row":515,"column":94},"end":{"row":515,"column":95},"action":"remove","lines":["e"]},{"start":{"row":515,"column":93},"end":{"row":515,"column":94},"action":"remove","lines":["r"]},{"start":{"row":515,"column":92},"end":{"row":515,"column":93},"action":"remove","lines":["u"]},{"start":{"row":515,"column":91},"end":{"row":515,"column":92},"action":"remove","lines":["c"]},{"start":{"row":515,"column":90},"end":{"row":515,"column":91},"action":"remove","lines":["e"]},{"start":{"row":515,"column":89},"end":{"row":515,"column":90},"action":"remove","lines":["s"]},{"start":{"row":515,"column":88},"end":{"row":515,"column":89},"action":"remove","lines":[" "]},{"start":{"row":515,"column":87},"end":{"row":515,"column":88},"action":"remove","lines":["t"]},{"start":{"row":515,"column":86},"end":{"row":515,"column":87},"action":"remove","lines":["i"]},{"start":{"row":515,"column":85},"end":{"row":515,"column":86},"action":"remove","lines":[" "]},{"start":{"row":515,"column":84},"end":{"row":515,"column":85},"action":"remove","lines":["p"]},{"start":{"row":515,"column":83},"end":{"row":515,"column":84},"action":"remove","lines":["e"]},{"start":{"row":515,"column":82},"end":{"row":515,"column":83},"action":"remove","lines":["e"]}],[{"start":{"row":515,"column":81},"end":{"row":515,"column":82},"action":"remove","lines":["k"],"id":4433},{"start":{"row":515,"column":80},"end":{"row":515,"column":81},"action":"remove","lines":[" "]},{"start":{"row":515,"column":79},"end":{"row":515,"column":80},"action":"remove","lines":["o"]},{"start":{"row":515,"column":78},"end":{"row":515,"column":79},"action":"remove","lines":["t"]}],[{"start":{"row":515,"column":78},"end":{"row":515,"column":79},"action":"insert","lines":["s"],"id":4434},{"start":{"row":515,"column":79},"end":{"row":515,"column":80},"action":"insert","lines":["o"]}],[{"start":{"row":515,"column":80},"end":{"row":515,"column":81},"action":"insert","lines":[" "],"id":4435},{"start":{"row":515,"column":81},"end":{"row":515,"column":82},"action":"insert","lines":["o"]},{"start":{"row":515,"column":82},"end":{"row":515,"column":83},"action":"insert","lines":["n"]},{"start":{"row":515,"column":83},"end":{"row":515,"column":84},"action":"insert","lines":["l"]},{"start":{"row":515,"column":84},"end":{"row":515,"column":85},"action":"insert","lines":["y"]}],[{"start":{"row":515,"column":85},"end":{"row":515,"column":86},"action":"insert","lines":[" "],"id":4436},{"start":{"row":515,"column":86},"end":{"row":515,"column":87},"action":"insert","lines":["a"]},{"start":{"row":515,"column":87},"end":{"row":515,"column":88},"action":"insert","lines":["v"]},{"start":{"row":515,"column":88},"end":{"row":515,"column":89},"action":"insert","lines":["a"]},{"start":{"row":515,"column":89},"end":{"row":515,"column":90},"action":"insert","lines":["i"]},{"start":{"row":515,"column":90},"end":{"row":515,"column":91},"action":"insert","lines":["l"]},{"start":{"row":515,"column":91},"end":{"row":515,"column":92},"action":"insert","lines":["a"]},{"start":{"row":515,"column":92},"end":{"row":515,"column":93},"action":"insert","lines":["b"]},{"start":{"row":515,"column":93},"end":{"row":515,"column":94},"action":"insert","lines":["l"]},{"start":{"row":515,"column":94},"end":{"row":515,"column":95},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":95},"end":{"row":515,"column":96},"action":"insert","lines":[" "],"id":4437},{"start":{"row":515,"column":96},"end":{"row":515,"column":97},"action":"insert","lines":["t"]},{"start":{"row":515,"column":97},"end":{"row":515,"column":98},"action":"insert","lines":["o"]}],[{"start":{"row":515,"column":98},"end":{"row":515,"column":99},"action":"insert","lines":[" "],"id":4438},{"start":{"row":515,"column":99},"end":{"row":515,"column":100},"action":"insert","lines":["t"]},{"start":{"row":515,"column":100},"end":{"row":515,"column":101},"action":"insert","lines":["h"]},{"start":{"row":515,"column":101},"end":{"row":515,"column":102},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":102},"end":{"row":515,"column":103},"action":"insert","lines":[" "],"id":4439},{"start":{"row":515,"column":103},"end":{"row":515,"column":104},"action":"insert","lines":["r"]},{"start":{"row":515,"column":104},"end":{"row":515,"column":105},"action":"insert","lines":["e"]},{"start":{"row":515,"column":105},"end":{"row":515,"column":106},"action":"insert","lines":["c"]},{"start":{"row":515,"column":106},"end":{"row":515,"column":107},"action":"insert","lines":["i"]},{"start":{"row":515,"column":107},"end":{"row":515,"column":108},"action":"insert","lines":["p"]},{"start":{"row":515,"column":108},"end":{"row":515,"column":109},"action":"insert","lines":["e"]}],[{"start":{"row":515,"column":109},"end":{"row":515,"column":110},"action":"insert","lines":[" "],"id":4440},{"start":{"row":515,"column":110},"end":{"row":515,"column":111},"action":"insert","lines":["o"]},{"start":{"row":515,"column":111},"end":{"row":515,"column":112},"action":"insert","lines":["w"]},{"start":{"row":515,"column":112},"end":{"row":515,"column":113},"action":"insert","lines":["n"]},{"start":{"row":515,"column":113},"end":{"row":515,"column":114},"action":"insert","lines":["e"]},{"start":{"row":515,"column":114},"end":{"row":515,"column":115},"action":"insert","lines":["r"]}],[{"start":{"row":515,"column":30},"end":{"row":515,"column":31},"action":"insert","lines":["."],"id":4441}]]},"ace":{"folds":[],"scrolltop":2724.5,"scrollleft":0,"selection":{"start":{"row":516,"column":46},"end":{"row":516,"column":46},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":187,"state":"start","mode":"ace/mode/python"}},"timestamp":1567372005921}